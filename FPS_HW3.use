
model FPS

abstract class FPSState
  operations
    run_from_opponent()
      begin
      end

    attack(i:Integer)
      begin
      end

    receive_blow(i:Integer)
      begin
      end

    reset()
      begin
      end

    see_opponent(o:Opponent)
      begin
      end
end






class Neutral < FPSState
  operations
    run_from_opponent()
      begin
           WriteLine('There is no such function in this state.');
           WriteLine('Current State: Neutral');
      end

    attack(i:Integer)
      begin
           WriteLine('There is no such function in this state.');
           WriteLine('Current State: Neutral');
      end

    receive_blow(i:Integer)
      begin
           WriteLine('There is no such function in this state.');
           WriteLine('Current State: Neutral');
      end

    reset()
      begin
           WriteLine('Reseting');
           WriteLine('Current State: Neutral');
           self.fPS.health := 100;
           self.fPS.level := 1;
           self.fPS.maxHealth := self.fPS.level * 100;
           self.fPS.fpsState := self.fPS.NeutralState;
      end

    see_opponent(o:Opponent)
      begin
	   if (o.health > self.fPS.health) then
             self.fPS.currentOpponent := o;
             WriteLine('Saw Undefeatable');
             WriteLine('Current State: Panic');
             self.fPS.fpsState := self.fPS.PanicState;
           end;

           if (o.health <= self.fPS.health) then
             self.fPS.currentOpponent := o;
             WriteLine('Saw Defeatable');
             WriteLine('Current State: Attack');
             self.fPS.fpsState := self.fPS.AttackState;
           end;
      end
end






class Attack < FPSState
  operations
    run_from_opponent()
      begin
           WriteLine('Ran From Opponent');
           WriteLine('Current State: Neutral');
           self.fPS.health := self.fPS.level * 100;
           self.fPS.maxHealth := self.fPS.level * 100;
           self.fPS.currentOpponent.health := self.fPS.currentOpponent.level * 100;
           self.fPS.fpsState := self.fPS.NeutralState;
      end

    attack(i:Integer)
      begin
           self.fPS.currentOpponent.health := self.fPS.currentOpponent.health - i;

           if (self.fPS.currentOpponent.health > 0) then
	     WriteLine('Opponent has health left');
             WriteLine('Current State: Attack');
           end;

	   if (self.fPS.currentOpponent.health < 1) then
             WriteLine('Opponent Defeated!');
             WriteLine('Current State: Neutral');
             self.fPS.level := self.fPS.level + 1;
             self.fPS.health := self.fPS.level * 100;
             self.fPS.maxHealth := self.fPS.level * 100;
             self.fPS.currentOpponent.health := self.fPS.currentOpponent.level * 100;
             self.fPS.fpsState := self.fPS.NeutralState;
           end;
      end

    receive_blow(i:Integer)
      begin
           WriteLine('Received Blow');
           self.fPS.health := self.fPS.health - i;

           if (self.fPS.health > 0) then
             WriteLine('Current State: Attack');
             self.fPS.fpsState := self.fPS.AttackState;
           end;

           if (self.fPS.health < 1) then
             self.fPS.level := self.fPS.level - 1;
             if (self.fPS.level < 1) then
               WriteLine('Current State: Dead');
               self.fPS.fpsState := self.fPS.DieState;
             end;
             if (self.fPS.level > 0) then
	       WriteLine('You have died and lost a level');
               WriteLine('Current State: Neutral');
               self.fPS.health := self.fPS.level * 100;
               self.fPS.maxHealth := self.fPS.level * 100;
               self.fPS.currentOpponent.health := self.fPS.currentOpponent.level * 100;
               self.fPS.fpsState := self.fPS.NeutralState;
             end;
           end;
      end

    reset()
      begin
           WriteLine('Reseting');
           WriteLine('Current State: Neutral');
           self.fPS.health := 100;
           self.fPS.level := 1;
           self.fPS.maxHealth := self.fPS.level * 100;
           self.fPS.fpsState := self.fPS.NeutralState;
      end

    see_opponent(o:Opponent)
      begin
           WriteLine('There is no such function in this state.');
           WriteLine('Current State: Attack');
      end
end







class Panic < FPSState
  operations
    run_from_opponent()
      begin
           WriteLine('Ran From Opponent');
           WriteLine('Current State: Neutral');
           self.fPS.health := self.fPS.level * 100;
           self.fPS.maxHealth := self.fPS.level * 100;
           self.fPS.currentOpponent.health := self.fPS.currentOpponent.level * 100;
           self.fPS.fpsState := self.fPS.NeutralState;
      end

    attack(i:Integer)
      begin
           i := i - 10;
           self.fPS.currentOpponent.health := self.fPS.currentOpponent.health - i;
           WriteLine('You have done 10 less damage because Opponent is higher level.');

           if (self.fPS.currentOpponent.health > 0) then
	     WriteLine('Opponent has health left');
             WriteLine('Current State: Panic');
           end;

	   if (self.fPS.currentOpponent.health < 1) then
             WriteLine('Opponent Defeated!');
             WriteLine('Current State: Neutral');
             self.fPS.level := self.fPS.level + 1;
             self.fPS.health := self.fPS.level * 100;
             self.fPS.maxHealth := self.fPS.level * 100;
             self.fPS.currentOpponent.health := self.fPS.currentOpponent.level * 100;
             self.fPS.fpsState := self.fPS.NeutralState;
           end;
      end

    receive_blow(i:Integer)
      begin
           WriteLine('Received Blow');
           self.fPS.health := self.fPS.health - i;

           if (self.fPS.health > 0) then
             WriteLine('Current State: Panic');
             self.fPS.fpsState := self.fPS.PanicState;
           end;

           if (self.fPS.health < 1) then
             self.fPS.level := self.fPS.level - 1;
             if (self.fPS.level < 1) then
               WriteLine('Current State: Dead');
               self.fPS.fpsState := self.fPS.DieState;
             end;
             if (self.fPS.level > 0) then
	       WriteLine('You have died and lost a level');
               WriteLine('Current State: Neutral');
               self.fPS.health := self.fPS.level * 100;
               self.fPS.maxHealth := self.fPS.level * 100;
               self.fPS.currentOpponent.health := self.fPS.currentOpponent.level * 100;
               self.fPS.fpsState := self.fPS.NeutralState;
             end;
           end;
      end

    reset()
      begin
           WriteLine('Reseting');
           WriteLine('Current State: Neutral');
           self.fPS.health := 100;
           self.fPS.level := 1;
           self.fPS.maxHealth := self.fPS.level * 100;
           self.fPS.fpsState := self.fPS.NeutralState;
      end

    see_opponent(o:Opponent)
      begin
           WriteLine('There is no such function in this state.');
           WriteLine('Current State: Panic');
      end
end







class Die < FPSState
  operations
    run_from_opponent()
      begin
           WriteLine('There is no such function in this state.');
           WriteLine('Current State: Dead');
           WriteLine('You must reset');
      end

    attack(i:Integer)
      begin
           WriteLine('There is no such function in this state.');
           WriteLine('Current State: Dead');
           WriteLine('You must reset');
      end

    receive_blow(i:Integer)
      begin
           WriteLine('There is no such function in this state.');
           WriteLine('Current State: Dead');
           WriteLine('You must reset');
      end

    reset()
      begin
           WriteLine('Reseting');
           WriteLine('Current State: Neutral');
           self.fPS.health := 100;
           self.fPS.level := 1;
           self.fPS.maxHealth := self.fPS.level * 100;
           self.fPS.fpsState := self.fPS.NeutralState;
      end

    see_opponent(o:Opponent)
      begin
           WriteLine('There is no such function in this state.');
           WriteLine('Current State: Dead');
           WriteLine('You must reset');
      end
end





class Opponent
  attributes
    health : Integer
    level : Integer
  operations
    createHealth(i:Integer)
     begin
       self.health := i * 100;
     end
end





class FPS
  attributes
    health : Integer init : 100
    maxHealth : Integer init: 100
    level: Integer init : 1
    --This fpsState is needed for inside this class
    fpsState : FPSState
    NeutralState : FPSState
    AttackState : FPSState
    PanicState : FPSState
    DieState : FPSState  
    currentOpponent : Opponent
    easyOpponent : Opponent
    mediumOpponent : Opponent
    hardOpponent : Opponent

  operations
    initInstance()
      begin
	self.maxHealth := 100;
        self.health := 100;
        self.NeutralState := new Neutral;
        self.AttackState := new Attack;
        self.PanicState := new Panic;
        self.DieState := new Die;
        self.easyOpponent := new Opponent;
        self.mediumOpponent := new Opponent;
        self.hardOpponent := new Opponent;
        self.easyOpponent.level := 1;
        self.mediumOpponent.level := 2;
        self.hardOpponent.level := 3;
        self.easyOpponent.createHealth(self.easyOpponent.level);
        self.mediumOpponent.createHealth(self.mediumOpponent.level);
        self.hardOpponent.createHealth(self.hardOpponent.level);

    	self.currentOpponent := self.easyOpponent;
        self.fpsState := self.NeutralState;
      end

    run_from_opponent()
      begin
        self.fpsState.run_from_opponent();
      end

    attack(i:Integer)
      begin
	self.fpsState.attack(i);
      end

    receive_blow(i:Integer)
      begin
        self.fpsState.receive_blow(i);
      end

    reset()
      begin
        self.fpsState.reset();
      end

    see_opponent(o:Opponent)
      begin
        self.fpsState.see_opponent(o);
      end

  statemachines
    psm StatePattern
      states
        startUp:initial
          Neutral	[fpsState = NeutralState]
          Attack	[fpsState = AttackState]
          Panic		[fpsState = PanicState]
          Die		[fpsState = DieState]
      transitions
        startUp -> Neutral	{ create }
          Neutral -> Attack { [fpsState = NeutralState] see_opponent() [health >= currentOpponent.health] }
          Neutral -> Panic { [fpsState = NeutralState] see_opponent() [health < currentOpponent.health] }
          Attack -> Neutral { [fpsState = AttackState] reset() }
          Attack -> Neutral { [fpsState = AttackState] run_from_opponent() }
          Attack -> Neutral { [fpsState = AttackState] receive_blow() }
          Attack -> Neutral { [currentOpponent.health - i < 1 and fpsState = AttackState] attack() }
          Attack -> Attack { [currentOpponent.health - i > 0 and fpsState = AttackState] attack() }
          Attack -> Attack { [health - i > 0 and fpsState = AttackState] receive_blow() }
          Attack -> Die { [fpsState = AttackState] receive_blow() }
          Panic -> Neutral { [fpsState = PanicState] reset() }
          Panic -> Neutral { [fpsState = PanicState] run_from_opponent() }
          Panic -> Neutral { [fpsState = PanicState] receive_blow() }
          Panic -> Neutral { [currentOpponent.health - i < 1 and fpsState = PanicState] attack() }
          Panic -> Panic { [currentOpponent.health - i > 0 and fpsState = PanicState] attack() }
          Panic -> Panic { [health - i > 0 and fpsState = PanicState] receive_blow() }
          Panic -> Die { [fpsState = PanicState] receive_blow() }
          Die -> Neutral { [fpsState = DieState] reset() }
    end

    psm Usage
      states
        startUp:initial
        Neutral	[health = maxHealth]
        Attack	[health > 0 and health <= maxHealth]
        Panic	[health > 0 and health <= maxHealth]
        Die	[health = 0]
      transitions
        startUp -> Neutral	{ create }
        Neutral -> Attack { see_opponent() [health >= currentOpponent.health] }
        Neutral -> Panic { see_opponent() [health < currentOpponent.health] }
        Attack -> Neutral { reset() }
        Attack -> Neutral { run_from_opponent() }
        Attack -> Neutral { receive_blow() }
        Attack -> Neutral { [currentOpponent.health - i < 1] attack() }
        Attack -> Attack { [currentOpponent.health - i > 0] attack() }
        Attack -> Attack { [health - i > 0] receive_blow() }
        Attack -> Die { receive_blow() }
        Panic -> Neutral { reset() }
        Panic -> Neutral { run_from_opponent() }
        Panic -> Neutral { receive_blow() }
        Panic -> Neutral { [currentOpponent.health - i < 1] attack() }
        Panic -> Panic { [currentOpponent.health - i > 0] attack() }
        Panic -> Panic { [health - i > 0] receive_blow() }
        Panic -> Die { receive_blow() }
        Die -> Neutral { reset() }
    end
end





--associations
association firstPersonShooterState between
  FPSState[1]
  FPS[1]
end

association opponentFight between
  Opponent[1]
  FPS[1]
end











