--!!!!!!!!! READ THE READ ME !!!!!!!!!!



model FPS

abstract class FPSState
  operations
    see_defeatable()
      begin
      end

    see_undefeatable()
      begin
      end

    run_from_opponent()
      begin
      end

    receive_blow(i:Integer)
      begin
      end

    reset()
      begin
      end
end

class Neutral < FPSState
  operations
    see_defeatable()
      begin
           WriteLine('Saw Defeatable');
           WriteLine('Current State: Attack');
           self.fPS.fpsState := self.fPS.AttackState;
      end

    see_undefeatable()
      begin
           WriteLine('Saw Undefeatable');
           WriteLine('Current State: Panic');
           self.fPS.fpsState := self.fPS.PanicState;
      end

    run_from_opponent()
      begin
           WriteLine('There is no such function in this state.');
           WriteLine('Current State: Neutral');
      end

    receive_blow(i:Integer)
      begin
           WriteLine('There is no such function in this state.');
           WriteLine('Current State: Neutral');
      end

    reset()
      begin
           WriteLine('Reseting');
           WriteLine('Current State: Neutral');
           self.fPS.health := 100;
           self.fPS.fpsState := self.fPS.NeutralState;
      end
end

class Attack < FPSState
  operations
    see_defeatable()
      begin
           WriteLine('There is no such function in this state.');
           WriteLine('Current State: Attack');
      end

    see_undefeatable()
      begin
           WriteLine('There is no such function in this state.');
           WriteLine('Current State: Attack');
      end

    run_from_opponent()
      begin
           WriteLine('Ran From Opponent');
           WriteLine('Current State: Neutral');
           self.fPS.fpsState := self.fPS.NeutralState;
      end

    receive_blow(i:Integer)
      begin
           WriteLine('Received Blow');
           self.fPS.health := self.fPS.health - i;

           if (self.fPS.health < 1) then
             WriteLine('Current State: Dead');
             self.fPS.fpsState := self.fPS.DieState;
           end;

           if (self.fPS.health > 0) then
             WriteLine('Current State: Attack');
             self.fPS.fpsState := self.fPS.AttackState;
           end;
      end

    reset()
      begin
           WriteLine('Reseting');
           WriteLine('Current State: Neutral');
           self.fPS.health := 100;
           self.fPS.fpsState := self.fPS.NeutralState;
      end
end

class Panic < FPSState
  operations
    see_defeatable()
      begin
           WriteLine('There is no such function in this state.');
           WriteLine('Current State: Panic');
      end

    see_undefeatable()
      begin
           WriteLine('There is no such function in this state.');
           WriteLine('Current State: Panic');
      end

    run_from_opponent()
      begin
           WriteLine('Ran From Opponent');
           WriteLine('Current State: Neutral');
           self.fPS.fpsState := self.fPS.NeutralState;
      end

    receive_blow(i:Integer)
      begin
           WriteLine('Received Blow');
           self.fPS.health := self.fPS.health - i;

           if (self.fPS.health < 1) then
             WriteLine('Current State: Dead');
             self.fPS.fpsState := self.fPS.DieState;
           end;

           if (self.fPS.health > 0) then
             WriteLine('Current State: Dead');
             self.fPS.fpsState := self.fPS.PanicState;
           end;
      end

    reset()
      begin
           WriteLine('Reseting');
           WriteLine('Current State: Neutral');
           self.fPS.health := 100;
           self.fPS.fpsState := self.fPS.NeutralState;
      end
end

class Die < FPSState
  operations
    see_defeatable()
      begin
           WriteLine('There is no such function in this state.');
           WriteLine('Current State: Dead');
           WriteLine('You must reset');
      end

    see_undefeatable()
      begin
           WriteLine('There is no such function in this state.');
           WriteLine('Current State: Dead');
           WriteLine('You must reset');
      end

    run_from_opponent()
      begin
           WriteLine('There is no such function in this state.');
           WriteLine('Current State: Dead');
           WriteLine('You must reset');
      end

    receive_blow(i:Integer)
      begin
           WriteLine('There is no such function in this state.');
           WriteLine('Current State: Dead');
           WriteLine('You must reset');
      end

    reset()
      begin
           WriteLine('Reseting');
           WriteLine('Current State: Neutral');
           self.fPS.health := 100;
           self.fPS.fpsState := self.fPS.NeutralState;
      end
end

class FPS
  attributes
    health : Integer init : 100
    --This fpsState is needed for inside this class
    fpsState : FPSState
    NeutralState : FPSState
    AttackState : FPSState
    PanicState : FPSState
    DieState : FPSState  

  operations
    initInstance()
      begin
        self.health := 100;
        self.NeutralState := new Neutral;
        self.AttackState := new Attack;
        self.PanicState := new Panic;
        self.DieState := new Die;

        self.fpsState := self.NeutralState;
      end

    
    see_defeatable()
      begin
        self.fpsState.see_defeatable();
      end

    see_undefeatable()
      begin
        self.fpsState.see_undefeatable();
      end

    run_from_opponent()
      begin
        self.fpsState.run_from_opponent();
      end

    receive_blow(i:Integer)
      begin
        self.fpsState.receive_blow(i);
      end

    reset()
      begin
        self.fpsState.reset();
      end

  statemachines
    psm StatePattern
      states
        startUp:initial
          Neutral	[fpsState = NeutralState]
          Attack	[fpsState = AttackState]
          Panic		[fpsState = PanicState]
          Die		[fpsState = DieState]
      transitions
        startUp -> Neutral	{ create }
          Neutral -> Attack { [fpsState = NeutralState] see_defeatable() }
          Neutral -> Panic { [fpsState = NeutralState] see_undefeatable() }
          Neutral -> Neutral { [fpsState = NeutralState] reset() }
          Attack -> Neutral { [fpsState = AttackState] reset() }
          Attack -> Neutral { [fpsState = AttackState] run_from_opponent() }
          Attack -> Attack { [health - i > 0 and fpsState = AttackState] receive_blow() }
          Attack -> Die { [health - i < 1 and fpsState = AttackState] receive_blow() }
          Panic -> Neutral { [fpsState = PanicState] reset() }
          Panic -> Neutral { [fpsState = PanicState] run_from_opponent() }
          Panic -> Panic { [health - i > 0 and fpsState = PanicState] receive_blow() }
          Panic -> Die { [health - i < 1 and fpsState = PanicState] receive_blow() }
          Die -> Neutral { [fpsState = DieState] reset() }
    end

    psm Usage
      states
        startUp:initial
        Neutral	[health = 100]
        Attack	[health > 0 and health < 100]
        Panic	[health > 0 and health < 100]
        Die	[health = 0]
      transitions
        startUp -> Neutral	{ create }
        Neutral -> Neutral { reset() }
        Neutral -> Attack { see_defeatable() }
        Neutral -> Panic { see_undefeatable() }
        Attack -> Neutral { reset() }
        Attack -> Neutral { run_from_opponent() }
        Attack -> Attack { [health - i > 0] receive_blow() }
        Attack -> Die { [health - i < 1] receive_blow() }
        Panic -> Neutral { reset() }
        Panic -> Neutral { run_from_opponent() }
        Panic -> Panic { [health - i > 0] receive_blow() }
        Panic -> Die { [health - i < 1] receive_blow() }
        Die -> Neutral { reset() }
    end
end

--associations
association firstPersonShooterState between
  FPSState[1]
  FPS[1]
end













