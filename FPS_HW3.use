model FirstPersonShooter

abstract class FPSState
  operations
    see_defeatable()
      begin
      end

    see_undefeatable()
      begin
      end

    lost_to_opponent()
      begin
      end

    receive_blow(i:Integer)
      begin
      end

    reset()
      begin
      end
end

class Neutral < FPSState
  operations
    see_defeatable()
      begin
           WriteLine('Saw Defeatable');
      end

    see_undefeatable()
      begin
           WriteLine('Saw Undefeatable');
      end

    lost_to_opponent()
      begin
           WriteLine('Lost To Opponent');
      end

    receive_blow(i:Integer)
      begin
           WriteLine('Received Blow');
      end

    reset()
      begin
           WriteLine('Rest');
      end
end

class Attack < FPSState
  operations
    see_defeatable()
      begin
           WriteLine('Saw Defeatable');
      end

    see_undefeatable()
      begin
           WriteLine('Saw Undefeatable');
      end

    lost_to_opponent()
      begin
           WriteLine('Lost To Opponent');
      end

    receive_blow(i:Integer)
      begin
           WriteLine('Received Blow');
      end

    reset()
      begin
           WriteLine('Rest');
      end
end

class Panic < FPSState
  operations
    see_defeatable()
      begin
           WriteLine('Saw Defeatable');
      end

    see_undefeatable()
      begin
           WriteLine('Saw Undefeatable');
      end

    lost_to_opponent()
      begin
           WriteLine('Lost To Opponent');
      end

    receive_blow(i:Integer)
      begin
           WriteLine('Received Blow');
      end

    reset()
      begin
           WriteLine('Rest');
      end
end

class Die < FPSState
  operations
    see_defeatable()
      begin
           WriteLine('Saw Defeatable');
      end

    see_undefeatable()
      begin
           WriteLine('Saw Undefeatable');
      end

    lost_to_opponent()
      begin
           WriteLine('Lost To Opponent');
      end

    receive_blow(i:Integer)
      begin
           WriteLine('Received Blow');
      end

    reset()
      begin
           WriteLine('Rest');
      end
end

class FPS
  attributes
    health : Integer init : 0
    
    --This fpsState is needed for inside this class
    fpsState : FPSState
    NeutralState : FPSState
    AttackState : FPSState
    PanicState : FPSState
    DieState : FPSState  

  operations
    initInstance()
      begin
        self.health := 0;
        self.NeutralState := new Neutral;
        self.AttackState := new Attack;
        self.PanicState := new Panic;
        self.DieState := new Die;

        self.fpsState := self.NeutralState;
      end

    
    see_defeatable()
      begin
        self.fpsState.see_defeatable();
      end

    see_undefeatable()
      begin
        self.fpsState.see_undefeatable();
      end

    lost_to_opponent()
      begin
        self.fpsState.lost_to_opponent();
      end

    receive_blow(i:Integer)
      begin
        self.fpsState.receive_blow(i);
      end

    reset()
      begin
        self.fpsState.reset();
      end

  statemachines
    psm StatePattern
      states
        startUp:initial
          Neutral	[fpsState = NeutralState]
          Attack	[fpsState = AttackState]
          Panic		[fpsState = PanicState]
          Die		[fpsState = DieState]
      transitions
        startUp -> Neutral	{ create }
    end

    psm Usage
      states
        startUp:initial
        Neutral	[health = 100]
        Attack	[health > 0 and health < 100]
        Panic	[health > 0 and health < 100]
        Die	[health = 0]
      transitions
        startUp -> Neutral	{ create }
    end
end

--associations
association firstPersonShooterState between
  FPSState[1]
  FPS[1]
end













