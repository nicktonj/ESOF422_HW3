--!!!!!!!!! READ THE READ ME !!!!!!!!!!



model FPS

abstract class FPSState
  operations
    see_defeatable()
      begin
      end

    see_undefeatable()
      begin
      end

    lost_to_opponent()
      begin
      end

    receive_blow()
      begin
      end

    reset()
      begin
      end
end

class Neutral < FPSState
  operations
    see_defeatable()
      begin
           WriteLine('Saw Defeatable');
           self.fPS.fpsState := self.fPS.AttackState;
      end

    see_undefeatable()
      begin
           WriteLine('Saw Undefeatable');
           self.fPS.fpsState := self.fPS.PanicState;
      end

    lost_to_opponent()
      begin
           WriteLine('There is no such function in this state.');
      end

    receive_blow()
      begin
           WriteLine('There is no such function in this state.');
      end

    reset()
      begin
           WriteLine('Reseting');
           self.fPS.health := 100;
           self.fPS.fpsState := self.fPS.NeutralState;
      end
end

class Attack < FPSState
  operations
    see_defeatable()
      begin
           WriteLine('There is no such function in this state.');
      end

    see_undefeatable()
      begin
           WriteLine('There is no such function in this state.');
      end

    lost_to_opponent()
      begin
           WriteLine('Lost To Opponent');
           self.fPS.fpsState := self.fPS.NeutralState;
      end

    receive_blow()
      begin
           WriteLine('Received Blow');
           self.fPS.fpsState := self.fPS.DieState;
      end

    reset()
      begin
           WriteLine('Reseting');
           self.fPS.health := 100;
           self.fPS.fpsState := self.fPS.NeutralState;
      end
end

class Panic < FPSState
  operations
    see_defeatable()
      begin
           WriteLine('There is no such function in this state.');
      end

    see_undefeatable()
      begin
           WriteLine('There is no such function in this state.');
      end

    lost_to_opponent()
      begin
           WriteLine('Lost To Opponent');
           self.fPS.fpsState := self.fPS.NeutralState;
      end

    receive_blow()
      begin
           WriteLine('Received Blow');
           self.fPS.fpsState := self.fPS.DieState;
      end

    reset()
      begin
           WriteLine('Reseting');
           self.fPS.health := 100;
           self.fPS.fpsState := self.fPS.NeutralState;
      end
end

class Die < FPSState
  operations
    see_defeatable()
      begin
           WriteLine('There is no such function in this state.');
      end

    see_undefeatable()
      begin
           WriteLine('There is no such function in this state.');
      end

    lost_to_opponent()
      begin
           WriteLine('There is no such function in this state.');
      end

    receive_blow()
      begin
           WriteLine('There is no such function in this state.');
      end

    reset()
      begin
           WriteLine('Reseting');
           self.fPS.health := 100;
           self.fPS.fpsState := self.fPS.NeutralState;
      end
end

class FPS
  attributes
    health : Integer init : 100
    --This fpsState is needed for inside this class
    fpsState : FPSState
    NeutralState : FPSState
    AttackState : FPSState
    PanicState : FPSState
    DieState : FPSState  

  operations
    initInstance()
      begin
        self.health := 100;
        self.NeutralState := new Neutral;
        self.AttackState := new Attack;
        self.PanicState := new Panic;
        self.DieState := new Die;

        self.fpsState := self.NeutralState;
      end

    
    see_defeatable()
      begin
        self.fpsState.see_defeatable();
      end

    see_undefeatable()
      begin
        self.fpsState.see_undefeatable();
      end

    lost_to_opponent()
      begin
        self.fpsState.lost_to_opponent();
      end

    receive_blow()
      begin
        self.fpsState.receive_blow();
      end

    reset()
      begin
        self.fpsState.reset();
      end

  statemachines
    psm StatePattern
      states
        startUp:initial
          Neutral	[fpsState = NeutralState]
          Attack	[fpsState = AttackState]
          Panic		[fpsState = PanicState]
          Die		[fpsState = DieState]
      transitions
        startUp -> Neutral	{ create }
          Neutral -> Attack { [fpsState = NeutralState] see_defeatable() }
          Neutral -> Panic { [fpsState = NeutralState] see_undefeatable() }
          Neutral -> Neutral { [fpsState = NeutralState] reset() }
          Attack -> Neutral { [fpsState = AttackState] reset() }
          Attack -> Neutral { [fpsState = AttackState] lost_to_opponent() }
          Attack -> Die { [fpsState = AttackState] receive_blow() }
          Panic -> Neutral { [fpsState = PanicState] reset() }
          Panic -> Neutral { [fpsState = PanicState] lost_to_opponent() }
          Panic -> Die { [fpsState = PanicState] receive_blow() }
          Die -> Neutral { [fpsState = DieState] reset() }
    end

    psm Usage
      states
        startUp:initial
          Neutral	[health = 100]
          Attack	[health > 0 and health < 100]
          Panic		[health > 0 and health < 100]
          Die		[health = 0]
      transitions
        startUp -> Neutral	{ create }
          Neutral -> Attack { see_defeatable() }
          Neutral -> Panic { see_undefeatable() }
          Neutral -> Neutral { reset() }
          Attack -> Neutral { reset() }
          Attack -> Neutral { lost_to_opponent() }
          Attack -> Die { receive_blow() }
          Panic -> Neutral { reset() }
          Panic -> Neutral { lost_to_opponent() }
          Panic -> Die { receive_blow() }
          Die -> Neutral { reset() }
    end
end

--associations
association firstPersonShooterState between
  FPSState[1]
  FPS[1]
end













